<beast version='2.0'
       namespace='beast.app.beauti:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.base.evolution.tree.coalescent:beast.base.util:beast.base.math:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.inference.distribution'>

       
    <mergewith point='parametricDistributions'>
        <!-- MultiMonophyleticConstraint -->
        <subtemplate id='MultiMonoConstraint' class='beastlabs.math.distributions.MultiMonophyleticConstraint' mainid='MultiMonophyleticConstraint.$(n)'>
<![CDATA[
            <distribution spec='beastlabs.math.distributions.MultiMonophyleticConstraint' id="MultiMonophyleticConstraint.$(n)" 
            	tree='@Tree.t:$(n)' newick='()' isBinary='true'/>
]]>
			<connect srcID="MultiMonophyleticConstraint.$(n)" targetID="prior" inputName="distribution" if="isInitializing"/>
        </subtemplate>


        <subtemplate id='SimpleRandomTree' class='beastlabs.evolution.tree.SimpleRandomTree' mainid='SimpleRandomTree.t:$(n)'
        	suppressInputs="
        	beastlabs.evolution.tree.SimpleRandomTree.weights,
	        beastlabs.evolution.tree.SimpleRandomTree.taxa,
	        beastlabs.evolution.tree.SimpleRandomTree.estimate,
        	beastlabs.evolution.tree.SimpleRandomTree.trait,
        	beastlabs.evolution.tree.SimpleRandomTree.taxonset,
        	beastlabs.evolution.tree.SimpleRandomTree.nodetype,
        	beastlabs.evolution.tree.SimpleRandomTree.initial">
<![CDATA[
            <tree spec='beastlabs.evolution.tree.SimpleRandomTree' id='SimpleRandomTree.t:$(n)' estimate='false' initial="@Tree.t:$(n)">
                <taxa idref='data'/>
            </tree>
]]>
        </subtemplate>
        

        <subtemplate id='SimpleConstrainedRandomTree' class='beastlabs.evolution.tree.SimpleConstrainedRandomTree' mainid='SimpleConstrainedRandomTree.t:$(n)'
        	suppressInputs="
        	beastlabs.evolution.tree.SimpleConstrainedRandomTree.weights,
	        beastlabs.evolution.tree.SimpleConstrainedRandomTree.taxa,
	        beastlabs.evolution.tree.SimpleConstrainedRandomTree.estimate,
        	beastlabs.evolution.tree.SimpleConstrainedRandomTree.trait,
        	beastlabs.evolution.tree.SimpleConstrainedRandomTree.taxonset,
        	beast.evolution.tree.SimpleConstrainedRandomTree.nodetype,
        	beastlabs.evolution.tree.SimpleConstrainedRandomTree.initial">
<![CDATA[
            <tree spec='beastlabs.evolution.tree.SimpleConstrainedRandomTree' id='SimpleConstrainedRandomTree.t:$(n)' estimate='false' initial="@Tree.t:$(n)">
                <taxa idref='data'/>
                <constraints spec="beastlabs.math.distributions.MultiMonophyleticConstraint" tree="@Tree.t:$(n)" newick="()"/>
            </tree>
]]>
        </subtemplate>
    </mergewith>
    
    <mergewith point='substModelTemplates'>
        <subtemplate id='BactrianOperatorSchedule' class='beast.base.evolution.operator.kernel.BactrianOperatorSchedule' mainid='BactrianOperatorSchedule_'
        suppressInputs="beast.base.evolution.operator.kernel.BactrianOperatorSchedule.operatorPattern,
				        beast.base.evolution.operator.kernel.BactrianOperatorSchedule.subschedule,
				        beast.base.evolution.operator.kernel.BactrianOperatorSchedule.operator">
<![CDATA[
        <operatorschedule id="BactrianOperatorSchedule_" spec="beast.base.evolution.operator.kernel.BactrianOperatorSchedule"/>
]]>
        </subtemplate>
    </mergewith>

</beast>


